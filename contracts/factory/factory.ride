{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let contractFilename = "factory.ride"

func wrapErr(s: String) = {
  contractFilename + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

func keyCalculatorAddress() = "%s__calculator"
func keyProxyTreasuryAddress() = "%s__proxyTreasury" # 3PEgG7eZHLFhcfsTSaYxgRhZsh4AxMvA4Ms
func keyChildAddress() = "%s__child" # 3PEwRcYNAUtoFvKpBhKoiwajnZfdoDR6h4h
# 0.005 waves to compensate the cost of the transaction
func keyBlockProcessingReward() = "%s__blockProcessingReward"
# feature 19 activation height should be set initially
func keyNextBlockToProcess() = "%s__nextBlockToProcess"

func keyLpAssetId() = "%s__lpAssetId"

let calculatorAddressOption = match this.getString(keyCalculatorAddress()) {
  case s: String => s.addressFromString()
  case _: Unit => unit
}
let calculatorAddressOrFail = calculatorAddressOption.valueOrErrorMessage(wrapErr("invalid calculator address"))

let proxyTreasuryAddressOption = match this.getString(keyProxyTreasuryAddress()) {
  case s: String => s.addressFromString()
  case _: Unit => unit
}
let proxyTreasuryAddressOrFail = proxyTreasuryAddressOption.valueOrErrorMessage(wrapErr("invalid proxy treasury address"))

func keyConfigAddress() = "%s__config"

# config keys
func keyChildrenAddress() = "contract_children"
func keyVotingResultAddress() = "contract_voting_result"

# voting result keys
func keyProposalAllowBroadcast(address: Address, txId: ByteVector) = {
  "proposal_allow_broadcast_" + address.toString() + "_" + txId.toBase58String()
}

# children keys
# early investments are stored in config.contract_children
# investments_token_<childAddress>
# investments_total_<childAddress>
# investor_<childAddress>_<userAddress>
func keyInvestedByUser(childAddress: Address, userAddress: Address) = [
  "investor",
  childAddress.toString(),
  userAddress.toString()
].makeString("_")


let configAddressOption = match this.getString(keyConfigAddress()) {
  case s: String => s.addressFromString()
  case _: Unit => unit
}
let configAddressOrFail = configAddressOption.valueOrErrorMessage(wrapErr("invalid config address"))

let votingResultAddressOption = match configAddressOption {
  case a: Address => match a.getString(keyVotingResultAddress()) {
    case s: String => s.addressFromString()
    case _: Unit => unit
  }
  case _: Unit => unit
}
let votingResultAddressOrFail = votingResultAddressOption.valueOrErrorMessage(wrapErr("invalid voting result address"))

let childrenAddressOption = match configAddressOption {
  case a: Address => match a.getString(keyChildrenAddress()) {
    case s: String => s.addressFromString()
    case _: Unit => unit
  }
  case _: Unit => unit
}
let childrenAddressOrFail = childrenAddressOption.valueOrErrorMessage(wrapErr("invalid children address"))

let lpAssetIdOption = match this.getString(keyLpAssetId()) {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}
let lpAssetIdOrFail = lpAssetIdOption.valueOrErrorMessage(wrapErr("invalid lpAssetId"))

func onlyAddress(i: Invocation, address: Address) = {
  i.caller == address || throwErr("permission denied")
}

func onlyThis(i: Invocation) = {
  onlyAddress(i, this)
}

func onlyCalculator(i: Invocation) = {
  onlyAddress(i, calculatorAddressOrFail)
}

@Callable(i)
func stringEntry(key: String, val: String) =
  if (i.onlyCalculator()) then ([StringEntry(key, val)], key) else ([], unit)

@Callable(i)
func integerEntry(key: String, val: Int) =
  if (i.onlyCalculator()) then ([IntegerEntry(key, val)], key) else ([], unit)

@Callable(i)
func booleanEntry(key: String, val: Boolean) =
  if (i.onlyCalculator()) then ([BooleanEntry(key, val)], key) else ([], unit)

@Callable(i)
func binaryEntry(key: String, val: ByteVector) =
  if (i.onlyCalculator()) then ([BinaryEntry(key, val)], key) else ([], unit)

@Callable(i)
func deleteEntry(key: String) =
  if (i.onlyCalculator()) then ([DeleteEntry(key)], key) else ([], unit)

@Callable(i)
func reissue(amount: Int) = 
  if (i.onlyCalculator()) then ([Reissue(lpAssetIdOrFail, amount, true)], amount) else ([], unit)

@Callable(i)
func burn(amount: Int) = 
  if (i.onlyCalculator()) then ([Burn(lpAssetIdOrFail, amount)], amount) else ([], unit)

@Callable(i)
func transferAsset(recepientBytes: ByteVector, amount: Int, assetId: ByteVector) = 
  if (i.onlyCalculator()) then ([ScriptTransfer(Address(recepientBytes), amount, assetId)], amount) else ([], unit)

@Callable(i)
func transferWaves(recepientBytes: ByteVector, amount: Int) = 
  if (i.onlyCalculator()) then ([ScriptTransfer(Address(recepientBytes), amount, unit)], amount) else ([], unit)

@Callable(i)
func transferFromProxyTreasury(recipientBytes: ByteVector, rewardsAmount: Int) =
  if (i.onlyCalculator()) then (nil, proxyTreasuryAddressOrFail.invoke("transferWaves", [recipientBytes, rewardsAmount], [])) else ([], unit)

# finalize period
@Callable(i)
func finalize(
  newTreasuryVolumeInWaves: Int,
  pwrManagersBonusInWaves: Int,
  treasuryVolumeDiffAllocationCoef: Int
) = {
  (
    nil,
    calculatorAddressOrFail.reentrantInvoke(
      "finalize",
      [
        i.caller.bytes,
        newTreasuryVolumeInWaves,
        pwrManagersBonusInWaves,
        treasuryVolumeDiffAllocationCoef
      ],
      i.payments
    )
  )
}

@Callable(i)
func claimLP() =
  (nil, calculatorAddressOrFail.reentrantInvoke("claimLP", [i.caller.bytes], i.payments))

@Callable(i)
func claimWaves(txIdStr: String) =
  (nil, calculatorAddressOrFail.reentrantInvoke("claimWaves", [i.caller.bytes, txIdStr.fromBase58String()], i.payments))

@Callable(i)
func invest() =
  (nil, calculatorAddressOrFail.reentrantInvoke("invest", [i.caller.bytes], i.payments))

@Callable(i)
func withdraw() =
  (nil, calculatorAddressOrFail.reentrantInvoke("withdraw", [i.caller.bytes], i.payments))

@Callable(i)
func cancelWithdraw(txIdStr: String) =
  (nil, calculatorAddressOrFail.reentrantInvoke("cancelWithdraw", [i.caller.bytes, txIdStr.fromBase58String()], i.payments))

# process miners blocks
@Callable(i)
func processBlocks() = (nil, calculatorAddressOrFail.reentrantInvoke("processBlocks", [i.caller.bytes], i.payments))

@Verifier(tx)
func verify() = {
  let byProposal = votingResultAddressOrFail.getBoolean(keyProposalAllowBroadcast(this, tx.id)).valueOrElse(false)
  let byOwner = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  if (votingResultAddressOption != unit) then {
    byProposal || byOwner
  } else byOwner
}
